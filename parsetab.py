
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ASSIGN BOOLEAN CHAR COLON COMMA CTEC CTEF CTEI CTES DEC DIV DO DOT ELSE ENDL EQUALS EQUAL_MAJOR EQUAL_MINOR FALSE FLOAT FOR FUNC ID IF INT LESS_THAN L_COR L_PAR L_SQ MAIN MEAN MINUS MODE MORE_THAN MULT NON_EQUAL NOT OR PLOTXY PLUS PRINT PROGRAM READ RETURN R_COR R_PAR R_SQ SEMICOLON THEN TO TRUE VAR VARY VOID WHILEprogram : PROGRAM ID SEMICOLON pVars gtm fun meingtm : pVars : vars\n             | emptyvars : VAR COLON vars2vars2 : vare COLON type def SEMICOLON vars3 vars3 : vars2\n              | emptytype : INT\n            | FLOAT\n            | CHARdef : vare : ID arar : L_SQ siz R_SQ\n           | emptysiz : CTEI matmat : DOT CTEI\n           | emptyfun : Fun fuc\n           | emptyfuc : funFun : FUNC Ftype ID mst L_PAR param paran R_PAR SEMICOLON pVars bloq endfunFtype : type\n            | VOIDmst : param : ID COLON type xparam\n             | emptyxparam : COMMA ID COLON type xparam\n            | emptyparan : endfun : mein : MAIN pmain L_PAR R_PAR bloqpmain : bloq : L_COR statbloq R_CORstatbloq : estatuto statbloq\n                | emptyestatuto : cond\n                | whil\n                | prin\n                | asign\n                | mcall\n                | read\n                | retmcall : Mcall SEMICOLON Mcall : ID chkmod L_PAR era cparam parck R_PARchkmod : era :  cparam : expres cxparam\n               | emptycxparam : COMMA expres cxparam\n               | emptyparck : cond : IF L_PAR expres conval R_PAR THEN bloq condex conf SEMICOLONconval : conf : condex : ELSE jum bloq\n              | emptyjum : whil : WHILE L_PAR wju expres conval R_PAR DO bloq backwju : back : prin : PRINT L_PAR str ptr R_PAR SEMICOLONptr : COMMA str ptr\n           | emptystr : expres\n            | CTESread : READ COLON variable SEMICOLONasign : variable ASSIGN expres SEMICOLONvariable : ID ch arr vaarr : L_SQ dim R_SQ\n           | emptydim : expres marmar : DOT expres\n           | emptyexpres : contr cc : con contr c\n         | emptycon : AND\n           | OR contr : exp cncn : cont exp cn\n         | emptycont : EQUALS\n            | EQUAL_MAJOR\n            | EQUAL_MINOR\n            | LESS_THAN\n            | MORE_THAN\n            | NOTexp : term tt : opt term t\n         | emptyUn : ADD \n        | DEC opt : PLUS\n            | MINUSterm : fact ff : fopt fact f\n         | emptyfopt : MULT\n            | DIVfact : L_PAR expres R_PAR\n              | sign varctesign : opt\n            | Un\n            | emptyvarcte : ID ch arr va\n              | CTEC apC\n              | CTES apS\n              | CTEI apI\n              | CTEF apF\n              | Mcall callcall : ch : va : apC : apS : apI : apF : ret : RETURN expres SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,18,48,76,],[0,-1,-32,-34,]),'ID':([2,10,22,23,24,25,26,27,45,46,49,57,59,60,61,62,63,64,65,72,76,78,79,80,81,82,83,89,90,91,92,93,94,95,96,97,103,110,112,114,115,117,119,120,121,122,123,124,126,129,131,132,142,144,146,152,154,155,170,184,188,193,199,211,215,216,],[3,17,33,-23,-24,-9,-10,-11,50,17,73,73,-37,-38,-39,-40,-41,-42,-43,-120,-34,-120,-60,-120,-120,-44,109,-120,135,-103,-104,-105,-94,-95,-92,-93,-120,-119,-120,-78,-79,-120,-83,-84,-85,-86,-87,-88,-120,-120,-99,-100,-120,-47,171,-120,-68,-67,-120,-120,-105,-62,-120,-61,-59,-53,]),'SEMICOLON':([3,25,26,27,34,39,70,76,84,85,86,87,88,98,101,107,108,109,111,113,116,118,125,127,128,130,134,135,136,137,138,139,140,141,143,156,157,158,159,160,161,162,163,164,165,166,167,175,177,178,179,180,181,182,195,203,205,208,210,213,217,],[4,-9,-10,-11,-12,46,82,-34,110,-120,-120,-120,-120,-120,148,154,155,-113,-75,-77,-80,-82,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-114,-71,-120,-120,-120,-120,-101,-120,-107,-108,-109,-110,-111,-69,193,-76,-81,-90,-97,-114,-70,-106,-120,-45,-55,-57,216,-56,]),'VAR':([4,148,],[8,8,]),'FUNC':([4,5,6,7,9,12,15,46,53,54,55,76,190,202,],[-120,-2,-3,-4,14,14,-5,-120,-6,-7,-8,-34,-31,-22,]),'MAIN':([4,5,6,7,9,11,12,13,15,20,21,46,53,54,55,76,190,202,],[-120,-2,-3,-4,-120,19,-120,-20,-5,-19,-21,-120,-6,-7,-8,-34,-31,-22,]),'L_COR':([6,7,15,44,46,53,54,55,148,172,191,204,209,214,],[-3,-4,-5,49,-120,-6,-7,-8,-120,49,49,49,-58,49,]),'COLON':([8,16,17,29,31,40,50,71,171,],[10,28,-120,-13,-15,-14,74,83,189,]),'VOID':([14,],[24,]),'INT':([14,28,74,189,],[25,25,25,25,]),'FLOAT':([14,28,74,189,],[26,26,26,26,]),'CHAR':([14,28,74,189,],[27,27,27,27,]),'L_SQ':([17,73,98,109,135,161,],[30,-113,142,-113,-113,142,]),'L_PAR':([19,32,33,38,66,67,68,72,73,78,79,80,81,89,94,95,99,103,112,114,115,117,119,120,121,122,123,124,126,129,131,132,135,142,144,152,170,184,199,],[-33,37,-25,45,78,79,80,89,-46,89,-60,89,89,89,-94,-95,144,89,89,-78,-79,89,-83,-84,-85,-86,-87,-88,89,89,-99,-100,-46,89,-47,89,89,89,89,]),'COMMA':([25,26,27,85,86,87,88,100,104,105,106,111,113,116,118,125,127,128,130,134,135,136,137,138,139,140,143,156,157,158,159,160,161,162,163,164,165,166,176,177,178,179,180,181,182,187,195,201,205,206,],[-9,-10,-11,-120,-120,-120,-120,146,152,-65,-66,-75,-77,-80,-82,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,-120,-120,-120,-120,-101,-120,-107,-108,-109,-110,-111,152,-76,-81,-90,-97,-114,-70,199,-106,146,-45,199,]),'R_PAR':([25,26,27,37,45,51,52,75,85,86,87,88,100,102,104,105,106,111,113,116,118,125,127,128,130,133,134,135,136,137,138,139,140,143,144,145,147,149,150,151,153,156,157,158,159,160,161,162,163,164,165,166,170,174,176,177,178,179,180,181,182,186,187,188,194,195,197,198,200,201,205,206,207,212,],[-9,-10,-11,44,-120,-30,-27,101,-120,-120,-120,-120,-120,-54,-120,-65,-66,-75,-77,-80,-82,-89,-91,-96,-98,160,-102,-113,-115,-116,-117,-118,-112,-71,-47,-26,-29,173,-54,175,-64,-120,-120,-120,-120,-101,-120,-107,-108,-109,-110,-111,-120,192,-120,-76,-81,-90,-97,-114,-70,-52,-120,-49,-63,-106,205,-48,-51,-120,-45,-120,-28,-50,]),'CTEI':([30,42,72,78,79,80,81,89,90,91,92,93,94,95,96,97,103,112,114,115,117,119,120,121,122,123,124,126,129,131,132,142,144,152,170,184,188,199,],[36,47,-120,-120,-60,-120,-120,-120,138,-103,-104,-105,-94,-95,-92,-93,-120,-120,-78,-79,-120,-83,-84,-85,-86,-87,-88,-120,-120,-99,-100,-120,-47,-120,-120,-120,-105,-120,]),'R_SQ':([35,36,41,43,47,85,86,87,88,111,113,116,118,125,127,128,130,134,135,136,137,138,139,140,143,156,157,158,159,160,161,162,163,164,165,166,168,169,177,178,179,180,181,182,183,185,195,196,205,],[40,-120,-16,-18,-17,-120,-120,-120,-120,-75,-77,-80,-82,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,-120,-120,-120,-120,-101,-120,-107,-108,-109,-110,-111,182,-120,-76,-81,-90,-97,-114,-70,-72,-74,-106,-73,-45,]),'DOT':([36,85,86,87,88,111,113,116,118,125,127,128,130,134,135,136,137,138,139,140,143,156,157,158,159,160,161,162,163,164,165,166,169,177,178,179,180,181,182,195,205,],[42,-120,-120,-120,-120,-75,-77,-80,-82,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,-120,-120,-120,-120,-101,-120,-107,-108,-109,-110,-111,184,-76,-81,-90,-97,-114,-70,-106,-45,]),'R_COR':([49,56,57,58,59,60,61,62,63,64,65,76,77,82,110,154,155,193,211,215,216,],[-120,76,-120,-36,-37,-38,-39,-40,-41,-42,-43,-34,-35,-44,-119,-68,-67,-62,-61,-59,-53,]),'IF':([49,57,59,60,61,62,63,64,65,76,82,110,154,155,193,211,215,216,],[66,66,-37,-38,-39,-40,-41,-42,-43,-34,-44,-119,-68,-67,-62,-61,-59,-53,]),'WHILE':([49,57,59,60,61,62,63,64,65,76,82,110,154,155,193,211,215,216,],[67,67,-37,-38,-39,-40,-41,-42,-43,-34,-44,-119,-68,-67,-62,-61,-59,-53,]),'PRINT':([49,57,59,60,61,62,63,64,65,76,82,110,154,155,193,211,215,216,],[68,68,-37,-38,-39,-40,-41,-42,-43,-34,-44,-119,-68,-67,-62,-61,-59,-53,]),'READ':([49,57,59,60,61,62,63,64,65,76,82,110,154,155,193,211,215,216,],[71,71,-37,-38,-39,-40,-41,-42,-43,-34,-44,-119,-68,-67,-62,-61,-59,-53,]),'RETURN':([49,57,59,60,61,62,63,64,65,76,82,110,154,155,193,211,215,216,],[72,72,-37,-38,-39,-40,-41,-42,-43,-34,-44,-119,-68,-67,-62,-61,-59,-53,]),'ASSIGN':([69,73,98,141,143,167,182,],[81,-113,-120,-114,-71,-69,-70,]),'PLUS':([72,78,79,80,81,87,88,89,94,95,103,112,114,115,117,119,120,121,122,123,124,126,128,129,130,131,132,134,135,136,137,138,139,140,142,143,144,152,158,159,160,161,162,163,164,165,166,170,180,181,182,184,195,199,205,],[94,94,-60,94,94,94,-120,94,-94,-95,94,94,-78,-79,94,-83,-84,-85,-86,-87,-88,94,-96,94,-98,-99,-100,-102,-113,-115,-116,-117,-118,-112,94,-71,-47,94,94,-120,-101,-120,-107,-108,-109,-110,-111,94,-97,-114,-70,94,-106,94,-45,]),'MINUS':([72,78,79,80,81,87,88,89,94,95,103,112,114,115,117,119,120,121,122,123,124,126,128,129,130,131,132,134,135,136,137,138,139,140,142,143,144,152,158,159,160,161,162,163,164,165,166,170,180,181,182,184,195,199,205,],[95,95,-60,95,95,95,-120,95,-94,-95,95,95,-78,-79,95,-83,-84,-85,-86,-87,-88,95,-96,95,-98,-99,-100,-102,-113,-115,-116,-117,-118,-112,95,-71,-47,95,95,-120,-101,-120,-107,-108,-109,-110,-111,95,-97,-114,-70,95,-106,95,-45,]),'ADD':([72,78,79,80,81,89,94,95,103,112,114,115,117,119,120,121,122,123,124,126,129,131,132,142,144,152,170,184,199,],[96,96,-60,96,96,96,-94,-95,96,96,-78,-79,96,-83,-84,-85,-86,-87,-88,96,96,-99,-100,96,-47,96,96,96,96,]),'DEC':([72,78,79,80,81,89,94,95,103,112,114,115,117,119,120,121,122,123,124,126,129,131,132,142,144,152,170,184,199,],[97,97,-60,97,97,97,-94,-95,97,97,-78,-79,97,-83,-84,-85,-86,-87,-88,97,97,-99,-100,97,-47,97,97,97,97,]),'CTEC':([72,78,79,80,81,89,90,91,92,93,94,95,96,97,103,112,114,115,117,119,120,121,122,123,124,126,129,131,132,142,144,152,170,184,188,199,],[-120,-120,-60,-120,-120,-120,136,-103,-104,-105,-94,-95,-92,-93,-120,-120,-78,-79,-120,-83,-84,-85,-86,-87,-88,-120,-120,-99,-100,-120,-47,-120,-120,-120,-105,-120,]),'CTES':([72,78,79,80,81,89,90,91,92,93,94,95,96,97,103,112,114,115,117,119,120,121,122,123,124,126,129,131,132,142,144,152,170,184,188,199,],[-120,-120,-60,106,-120,-120,137,-103,-104,-105,-94,-95,-92,-93,-120,-120,-78,-79,-120,-83,-84,-85,-86,-87,-88,-120,-120,-99,-100,-120,-47,106,-120,-120,-105,-120,]),'CTEF':([72,78,79,80,81,89,90,91,92,93,94,95,96,97,103,112,114,115,117,119,120,121,122,123,124,126,129,131,132,142,144,152,170,184,188,199,],[-120,-120,-60,-120,-120,-120,139,-103,-104,-105,-94,-95,-92,-93,-120,-120,-78,-79,-120,-83,-84,-85,-86,-87,-88,-120,-120,-99,-100,-120,-47,-120,-120,-120,-105,-120,]),'ELSE':([76,203,],[-34,209,]),'AND':([85,86,87,88,116,118,125,127,128,130,134,135,136,137,138,139,140,143,156,157,158,159,160,161,162,163,164,165,166,178,179,180,181,182,195,205,],[114,-120,-120,-120,-80,-82,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,114,-120,-120,-120,-101,-120,-107,-108,-109,-110,-111,-81,-90,-97,-114,-70,-106,-45,]),'OR':([85,86,87,88,116,118,125,127,128,130,134,135,136,137,138,139,140,143,156,157,158,159,160,161,162,163,164,165,166,178,179,180,181,182,195,205,],[115,-120,-120,-120,-80,-82,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,115,-120,-120,-120,-101,-120,-107,-108,-109,-110,-111,-81,-90,-97,-114,-70,-106,-45,]),'EQUALS':([86,87,88,125,127,128,130,134,135,136,137,138,139,140,143,157,158,159,160,161,162,163,164,165,166,179,180,181,182,195,205,],[119,-120,-120,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,119,-120,-120,-101,-120,-107,-108,-109,-110,-111,-90,-97,-114,-70,-106,-45,]),'EQUAL_MAJOR':([86,87,88,125,127,128,130,134,135,136,137,138,139,140,143,157,158,159,160,161,162,163,164,165,166,179,180,181,182,195,205,],[120,-120,-120,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,120,-120,-120,-101,-120,-107,-108,-109,-110,-111,-90,-97,-114,-70,-106,-45,]),'EQUAL_MINOR':([86,87,88,125,127,128,130,134,135,136,137,138,139,140,143,157,158,159,160,161,162,163,164,165,166,179,180,181,182,195,205,],[121,-120,-120,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,121,-120,-120,-101,-120,-107,-108,-109,-110,-111,-90,-97,-114,-70,-106,-45,]),'LESS_THAN':([86,87,88,125,127,128,130,134,135,136,137,138,139,140,143,157,158,159,160,161,162,163,164,165,166,179,180,181,182,195,205,],[122,-120,-120,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,122,-120,-120,-101,-120,-107,-108,-109,-110,-111,-90,-97,-114,-70,-106,-45,]),'MORE_THAN':([86,87,88,125,127,128,130,134,135,136,137,138,139,140,143,157,158,159,160,161,162,163,164,165,166,179,180,181,182,195,205,],[123,-120,-120,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,123,-120,-120,-101,-120,-107,-108,-109,-110,-111,-90,-97,-114,-70,-106,-45,]),'NOT':([86,87,88,125,127,128,130,134,135,136,137,138,139,140,143,157,158,159,160,161,162,163,164,165,166,179,180,181,182,195,205,],[124,-120,-120,-89,-91,-96,-98,-102,-113,-115,-116,-117,-118,-112,-71,124,-120,-120,-101,-120,-107,-108,-109,-110,-111,-90,-97,-114,-70,-106,-45,]),'MULT':([88,134,135,136,137,138,139,140,143,159,160,161,162,163,164,165,166,181,182,195,205,],[131,-102,-113,-115,-116,-117,-118,-112,-71,131,-101,-120,-107,-108,-109,-110,-111,-114,-70,-106,-45,]),'DIV':([88,134,135,136,137,138,139,140,143,159,160,161,162,163,164,165,166,181,182,195,205,],[132,-102,-113,-115,-116,-117,-118,-112,-71,132,-101,-120,-107,-108,-109,-110,-111,-114,-70,-106,-45,]),'THEN':([173,],[191,]),'DO':([192,],[204,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'pVars':([4,148,],[5,172,]),'vars':([4,148,],[6,6,]),'empty':([4,9,12,17,36,45,46,49,57,72,78,80,81,85,86,87,88,89,98,100,103,104,112,117,126,129,142,148,152,156,157,158,159,161,169,170,176,184,187,199,201,203,206,],[7,13,13,31,43,52,55,58,58,93,93,93,93,113,118,127,130,93,143,147,93,153,93,93,93,93,93,7,93,113,118,127,130,143,185,188,153,93,200,93,147,210,200,]),'gtm':([5,],[9,]),'fun':([9,12,],[11,21,]),'Fun':([9,12,],[12,12,]),'vars2':([10,46,],[15,54,]),'vare':([10,46,],[16,16,]),'mein':([11,],[18,]),'fuc':([12,],[20,]),'Ftype':([14,],[22,]),'type':([14,28,74,189,],[23,34,100,201,]),'ar':([17,],[29,]),'pmain':([19,],[32,]),'siz':([30,],[35,]),'mst':([33,],[38,]),'def':([34,],[39,]),'mat':([36,],[41,]),'bloq':([44,172,191,204,214,],[48,190,203,211,217,]),'param':([45,],[51,]),'vars3':([46,],[53,]),'statbloq':([49,57,],[56,77,]),'estatuto':([49,57,],[57,57,]),'cond':([49,57,],[59,59,]),'whil':([49,57,],[60,60,]),'prin':([49,57,],[61,61,]),'asign':([49,57,],[62,62,]),'mcall':([49,57,],[63,63,]),'read':([49,57,],[64,64,]),'ret':([49,57,],[65,65,]),'variable':([49,57,83,],[69,69,108,]),'Mcall':([49,57,90,],[70,70,140,]),'paran':([51,],[75,]),'expres':([72,78,80,81,89,103,142,152,170,184,199,],[84,102,105,107,133,150,169,105,187,196,206,]),'contr':([72,78,80,81,89,103,112,142,152,170,184,199,],[85,85,85,85,85,85,156,85,85,85,85,85,]),'exp':([72,78,80,81,89,103,112,117,142,152,170,184,199,],[86,86,86,86,86,86,86,157,86,86,86,86,86,]),'term':([72,78,80,81,89,103,112,117,126,142,152,170,184,199,],[87,87,87,87,87,87,87,87,158,87,87,87,87,87,]),'fact':([72,78,80,81,89,103,112,117,126,129,142,152,170,184,199,],[88,88,88,88,88,88,88,88,88,159,88,88,88,88,88,]),'sign':([72,78,80,81,89,103,112,117,126,129,142,152,170,184,199,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'opt':([72,78,80,81,87,89,103,112,117,126,129,142,152,158,170,184,199,],[91,91,91,91,126,91,91,91,91,91,91,91,91,126,91,91,91,]),'Un':([72,78,80,81,89,103,112,117,126,129,142,152,170,184,199,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'ch':([73,109,135,],[98,98,161,]),'chkmod':([73,135,],[99,99,]),'wju':([79,],[103,]),'str':([80,152,],[104,176,]),'c':([85,156,],[111,177,]),'con':([85,156,],[112,112,]),'cn':([86,157,],[116,178,]),'cont':([86,157,],[117,117,]),'t':([87,158,],[125,179,]),'f':([88,159,],[128,180,]),'fopt':([88,159,],[129,129,]),'varcte':([90,],[134,]),'arr':([98,161,],[141,181,]),'xparam':([100,201,],[145,207,]),'conval':([102,150,],[149,174,]),'ptr':([104,176,],[151,194,]),'apC':([136,],[162,]),'apS':([137,],[163,]),'apI':([138,],[164,]),'apF':([139,],[165,]),'call':([140,],[166,]),'va':([141,181,],[167,195,]),'dim':([142,],[168,]),'era':([144,],[170,]),'mar':([169,],[183,]),'cparam':([170,],[186,]),'parck':([186,],[197,]),'cxparam':([187,206,],[198,212,]),'endfun':([190,],[202,]),'condex':([203,],[208,]),'conf':([208,],[213,]),'jum':([209,],[214,]),'back':([211,],[215,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON pVars gtm fun mein','program',7,'p_programa','Parser.py',101),
  ('gtm -> <empty>','gtm',0,'p_gtm','Parser.py',110),
  ('pVars -> vars','pVars',1,'p_pVars','Parser.py',116),
  ('pVars -> empty','pVars',1,'p_pVars','Parser.py',117),
  ('vars -> VAR COLON vars2','vars',3,'p_vars','Parser.py',122),
  ('vars2 -> vare COLON type def SEMICOLON vars3','vars2',6,'p_vars2','Parser.py',126),
  ('vars3 -> vars2','vars3',1,'p_vars3','Parser.py',130),
  ('vars3 -> empty','vars3',1,'p_vars3','Parser.py',131),
  ('type -> INT','type',1,'p_type','Parser.py',135),
  ('type -> FLOAT','type',1,'p_type','Parser.py',136),
  ('type -> CHAR','type',1,'p_type','Parser.py',137),
  ('def -> <empty>','def',0,'p_def','Parser.py',144),
  ('vare -> ID ar','vare',2,'p_vare','Parser.py',313),
  ('ar -> L_SQ siz R_SQ','ar',3,'p_ar','Parser.py',319),
  ('ar -> empty','ar',1,'p_ar','Parser.py',320),
  ('siz -> CTEI mat','siz',2,'p_siz','Parser.py',329),
  ('mat -> DOT CTEI','mat',2,'p_mat','Parser.py',333),
  ('mat -> empty','mat',1,'p_mat','Parser.py',334),
  ('fun -> Fun fuc','fun',2,'p_fun','Parser.py',360),
  ('fun -> empty','fun',1,'p_fun','Parser.py',361),
  ('fuc -> fun','fuc',1,'p_fuc','Parser.py',364),
  ('Fun -> FUNC Ftype ID mst L_PAR param paran R_PAR SEMICOLON pVars bloq endfun','Fun',12,'p_Fun','Parser.py',369),
  ('Ftype -> type','Ftype',1,'p_Ftype','Parser.py',373),
  ('Ftype -> VOID','Ftype',1,'p_Ftype','Parser.py',374),
  ('mst -> <empty>','mst',0,'p_mst','Parser.py',380),
  ('param -> ID COLON type xparam','param',4,'p_param','Parser.py',441),
  ('param -> empty','param',1,'p_param','Parser.py',442),
  ('xparam -> COMMA ID COLON type xparam','xparam',5,'p_xparam','Parser.py',450),
  ('xparam -> empty','xparam',1,'p_xparam','Parser.py',451),
  ('paran -> <empty>','paran',0,'p_paran','Parser.py',461),
  ('endfun -> <empty>','endfun',0,'p_endfun','Parser.py',500),
  ('mein -> MAIN pmain L_PAR R_PAR bloq','mein',5,'p_mein','Parser.py',545),
  ('pmain -> <empty>','pmain',0,'p_pmain','Parser.py',551),
  ('bloq -> L_COR statbloq R_COR','bloq',3,'p_bloq','Parser.py',559),
  ('statbloq -> estatuto statbloq','statbloq',2,'p_statbloq','Parser.py',563),
  ('statbloq -> empty','statbloq',1,'p_statbloq','Parser.py',564),
  ('estatuto -> cond','estatuto',1,'p_estatuto','Parser.py',571),
  ('estatuto -> whil','estatuto',1,'p_estatuto','Parser.py',572),
  ('estatuto -> prin','estatuto',1,'p_estatuto','Parser.py',573),
  ('estatuto -> asign','estatuto',1,'p_estatuto','Parser.py',574),
  ('estatuto -> mcall','estatuto',1,'p_estatuto','Parser.py',575),
  ('estatuto -> read','estatuto',1,'p_estatuto','Parser.py',576),
  ('estatuto -> ret','estatuto',1,'p_estatuto','Parser.py',577),
  ('mcall -> Mcall SEMICOLON','mcall',2,'p_mcall','Parser.py',582),
  ('Mcall -> ID chkmod L_PAR era cparam parck R_PAR','Mcall',7,'p_Mcall','Parser.py',586),
  ('chkmod -> <empty>','chkmod',0,'p_chkmod','Parser.py',591),
  ('era -> <empty>','era',0,'p_era','Parser.py',599),
  ('cparam -> expres cxparam','cparam',2,'p_cparam','Parser.py',604),
  ('cparam -> empty','cparam',1,'p_cparam','Parser.py',605),
  ('cxparam -> COMMA expres cxparam','cxparam',3,'p_cxparam','Parser.py',614),
  ('cxparam -> empty','cxparam',1,'p_cxparam','Parser.py',615),
  ('parck -> <empty>','parck',0,'p_parck','Parser.py',624),
  ('cond -> IF L_PAR expres conval R_PAR THEN bloq condex conf SEMICOLON','cond',10,'p_cond','Parser.py',678),
  ('conval -> <empty>','conval',0,'p_conval','Parser.py',683),
  ('conf -> <empty>','conf',0,'p_conf','Parser.py',695),
  ('condex -> ELSE jum bloq','condex',3,'p_condex','Parser.py',701),
  ('condex -> empty','condex',1,'p_condex','Parser.py',702),
  ('jum -> <empty>','jum',0,'p_jum','Parser.py',710),
  ('whil -> WHILE L_PAR wju expres conval R_PAR DO bloq back','whil',9,'p_whil','Parser.py',720),
  ('wju -> <empty>','wju',0,'p_wju','Parser.py',724),
  ('back -> <empty>','back',0,'p_back','Parser.py',729),
  ('prin -> PRINT L_PAR str ptr R_PAR SEMICOLON','prin',6,'p_prin','Parser.py',740),
  ('ptr -> COMMA str ptr','ptr',3,'p_ptr','Parser.py',744),
  ('ptr -> empty','ptr',1,'p_ptr','Parser.py',745),
  ('str -> expres','str',1,'p_str','Parser.py',752),
  ('str -> CTES','str',1,'p_str','Parser.py',753),
  ('read -> READ COLON variable SEMICOLON','read',4,'p_read','Parser.py',768),
  ('asign -> variable ASSIGN expres SEMICOLON','asign',4,'p_asign','Parser.py',782),
  ('variable -> ID ch arr va','variable',4,'p_variable','Parser.py',791),
  ('arr -> L_SQ dim R_SQ','arr',3,'p_arr','Parser.py',796),
  ('arr -> empty','arr',1,'p_arr','Parser.py',797),
  ('dim -> expres mar','dim',2,'p_dim','Parser.py',811),
  ('mar -> DOT expres','mar',2,'p_mar','Parser.py',815),
  ('mar -> empty','mar',1,'p_mar','Parser.py',816),
  ('expres -> contr c','expres',2,'p_expres','Parser.py',878),
  ('c -> con contr c','c',3,'p_c','Parser.py',883),
  ('c -> empty','c',1,'p_c','Parser.py',884),
  ('con -> AND','con',1,'p_con','Parser.py',891),
  ('con -> OR','con',1,'p_con','Parser.py',892),
  ('contr -> exp cn','contr',2,'p_contr','Parser.py',898),
  ('cn -> cont exp cn','cn',3,'p_cn','Parser.py',902),
  ('cn -> empty','cn',1,'p_cn','Parser.py',903),
  ('cont -> EQUALS','cont',1,'p_cont','Parser.py',911),
  ('cont -> EQUAL_MAJOR','cont',1,'p_cont','Parser.py',912),
  ('cont -> EQUAL_MINOR','cont',1,'p_cont','Parser.py',913),
  ('cont -> LESS_THAN','cont',1,'p_cont','Parser.py',914),
  ('cont -> MORE_THAN','cont',1,'p_cont','Parser.py',915),
  ('cont -> NOT','cont',1,'p_cont','Parser.py',916),
  ('exp -> term t','exp',2,'p_exp','Parser.py',921),
  ('t -> opt term t','t',3,'p_t','Parser.py',925),
  ('t -> empty','t',1,'p_t','Parser.py',926),
  ('Un -> ADD','Un',1,'p_Un','Parser.py',934),
  ('Un -> DEC','Un',1,'p_Un','Parser.py',935),
  ('opt -> PLUS','opt',1,'p_opt','Parser.py',940),
  ('opt -> MINUS','opt',1,'p_opt','Parser.py',941),
  ('term -> fact f','term',2,'p_term','Parser.py',947),
  ('f -> fopt fact f','f',3,'p_f','Parser.py',951),
  ('f -> empty','f',1,'p_f','Parser.py',952),
  ('fopt -> MULT','fopt',1,'p_fopt','Parser.py',961),
  ('fopt -> DIV','fopt',1,'p_fopt','Parser.py',962),
  ('fact -> L_PAR expres R_PAR','fact',3,'p_fact','Parser.py',968),
  ('fact -> sign varcte','fact',2,'p_fact','Parser.py',969),
  ('sign -> opt','sign',1,'p_sign','Parser.py',1010),
  ('sign -> Un','sign',1,'p_sign','Parser.py',1011),
  ('sign -> empty','sign',1,'p_sign','Parser.py',1012),
  ('varcte -> ID ch arr va','varcte',4,'p_varcte','Parser.py',1017),
  ('varcte -> CTEC apC','varcte',2,'p_varcte','Parser.py',1018),
  ('varcte -> CTES apS','varcte',2,'p_varcte','Parser.py',1019),
  ('varcte -> CTEI apI','varcte',2,'p_varcte','Parser.py',1020),
  ('varcte -> CTEF apF','varcte',2,'p_varcte','Parser.py',1021),
  ('varcte -> Mcall call','varcte',2,'p_varcte','Parser.py',1022),
  ('call -> <empty>','call',0,'p_call','Parser.py',1032),
  ('ch -> <empty>','ch',0,'p_ch','Parser.py',1041),
  ('va -> <empty>','va',0,'p_va','Parser.py',1052),
  ('apC -> <empty>','apC',0,'p_apC','Parser.py',1071),
  ('apS -> <empty>','apS',0,'p_apS','Parser.py',1078),
  ('apI -> <empty>','apI',0,'p_apI','Parser.py',1085),
  ('apF -> <empty>','apF',0,'p_apF','Parser.py',1093),
  ('ret -> RETURN expres SEMICOLON','ret',3,'p_ret','Parser.py',1252),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1273),
]
